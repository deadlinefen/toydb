/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Ddl_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace toykv {


TCreateTableReq::~TCreateTableReq() noexcept {
}


void TCreateTableReq::__set_tableMeta(const std::string& val) {
  this->tableMeta = val;
__isset.tableMeta = true;
}
std::ostream& operator<<(std::ostream& out, const TCreateTableReq& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TCreateTableReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tableMeta);
          this->__isset.tableMeta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TCreateTableReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TCreateTableReq");

  if (this->__isset.tableMeta) {
    xfer += oprot->writeFieldBegin("tableMeta", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->tableMeta);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TCreateTableReq &a, TCreateTableReq &b) {
  using ::std::swap;
  swap(a.tableMeta, b.tableMeta);
  swap(a.__isset, b.__isset);
}

TCreateTableReq::TCreateTableReq(const TCreateTableReq& other0) {
  tableMeta = other0.tableMeta;
  __isset = other0.__isset;
}
TCreateTableReq& TCreateTableReq::operator=(const TCreateTableReq& other1) {
  tableMeta = other1.tableMeta;
  __isset = other1.__isset;
  return *this;
}
void TCreateTableReq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TCreateTableReq(";
  out << "tableMeta="; (__isset.tableMeta ? (out << to_string(tableMeta)) : (out << "<null>"));
  out << ")";
}


TDdlRes::~TDdlRes() noexcept {
}


void TDdlRes::__set_status(const  ::toykv::TStatus& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const TDdlRes& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TDdlRes::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->status.read(iprot);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TDdlRes::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TDdlRes");

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->status.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TDdlRes &a, TDdlRes &b) {
  using ::std::swap;
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

TDdlRes::TDdlRes(const TDdlRes& other2) {
  status = other2.status;
  __isset = other2.__isset;
}
TDdlRes& TDdlRes::operator=(const TDdlRes& other3) {
  status = other3.status;
  __isset = other3.__isset;
  return *this;
}
void TDdlRes::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TDdlRes(";
  out << "status=" << to_string(status);
  out << ")";
}

} // namespace
