/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "Status_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace toykv {

int _kTStatusCodeValues[] = {
  TStatusCode::OK,
  TStatusCode::TOYDB_ERR,
  TStatusCode::TOYKV_ERR,
  TStatusCode::TOYFLASH_ERR,
  TStatusCode::LEVELDB_ERR
};
const char* _kTStatusCodeNames[] = {
  "OK",
  "TOYDB_ERR",
  "TOYKV_ERR",
  "TOYFLASH_ERR",
  "LEVELDB_ERR"
};
const std::map<int, const char*> _TStatusCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTStatusCodeValues, _kTStatusCodeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const TStatusCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TStatusCode_VALUES_TO_NAMES.find(val);
  if (it != _TStatusCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TStatusCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TStatusCode_VALUES_TO_NAMES.find(val);
  if (it != _TStatusCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


TStatus::~TStatus() noexcept {
}


void TStatus::__set_code(const TStatusCode::type val) {
  this->code = val;
}

void TStatus::__set_err_msgs(const std::vector<std::string> & val) {
  this->err_msgs = val;
__isset.err_msgs = true;
}
std::ostream& operator<<(std::ostream& out, const TStatus& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TStatus::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_code = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->code = static_cast<TStatusCode::type>(ecast0);
          isset_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->err_msgs.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->err_msgs.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += iprot->readString(this->err_msgs[_i5]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.err_msgs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_code)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TStatus::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TStatus");

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->code));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.err_msgs) {
    xfer += oprot->writeFieldBegin("err_msgs", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->err_msgs.size()));
      std::vector<std::string> ::const_iterator _iter6;
      for (_iter6 = this->err_msgs.begin(); _iter6 != this->err_msgs.end(); ++_iter6)
      {
        xfer += oprot->writeString((*_iter6));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TStatus &a, TStatus &b) {
  using ::std::swap;
  swap(a.code, b.code);
  swap(a.err_msgs, b.err_msgs);
  swap(a.__isset, b.__isset);
}

TStatus::TStatus(const TStatus& other7) {
  code = other7.code;
  err_msgs = other7.err_msgs;
  __isset = other7.__isset;
}
TStatus& TStatus::operator=(const TStatus& other8) {
  code = other8.code;
  err_msgs = other8.err_msgs;
  __isset = other8.__isset;
  return *this;
}
void TStatus::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TStatus(";
  out << "code=" << to_string(code);
  out << ", " << "err_msgs="; (__isset.err_msgs ? (out << to_string(err_msgs)) : (out << "<null>"));
  out << ")";
}

} // namespace
