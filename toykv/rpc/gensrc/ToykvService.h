/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ToykvService_H
#define ToykvService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "Toykv_types.h"

namespace toykv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ToykvServiceIf {
 public:
  virtual ~ToykvServiceIf() {}
  virtual void Insert( ::toykv::TDmlRes& _return, const  ::toykv::TInsertReq& insertReq) = 0;
  virtual void Delete( ::toykv::TDmlRes& _return, const  ::toykv::TDeleteReq& deleteReq) = 0;
  virtual void CreateTable( ::toykv::TDdlRes& _return, const  ::toykv::TCreateTableReq& createTableReq) = 0;
};

class ToykvServiceIfFactory {
 public:
  typedef ToykvServiceIf Handler;

  virtual ~ToykvServiceIfFactory() {}

  virtual ToykvServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ToykvServiceIf* /* handler */) = 0;
  };

class ToykvServiceIfSingletonFactory : virtual public ToykvServiceIfFactory {
 public:
  ToykvServiceIfSingletonFactory(const ::std::shared_ptr<ToykvServiceIf>& iface) : iface_(iface) {}
  virtual ~ToykvServiceIfSingletonFactory() {}

  virtual ToykvServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(ToykvServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<ToykvServiceIf> iface_;
};

class ToykvServiceNull : virtual public ToykvServiceIf {
 public:
  virtual ~ToykvServiceNull() {}
  void Insert( ::toykv::TDmlRes& /* _return */, const  ::toykv::TInsertReq& /* insertReq */) override {
    return;
  }
  void Delete( ::toykv::TDmlRes& /* _return */, const  ::toykv::TDeleteReq& /* deleteReq */) override {
    return;
  }
  void CreateTable( ::toykv::TDdlRes& /* _return */, const  ::toykv::TCreateTableReq& /* createTableReq */) override {
    return;
  }
};

typedef struct _ToykvService_Insert_args__isset {
  _ToykvService_Insert_args__isset() : insertReq(false) {}
  bool insertReq :1;
} _ToykvService_Insert_args__isset;

class ToykvService_Insert_args {
 public:

  ToykvService_Insert_args(const ToykvService_Insert_args&);
  ToykvService_Insert_args& operator=(const ToykvService_Insert_args&);
  ToykvService_Insert_args() noexcept {
  }

  virtual ~ToykvService_Insert_args() noexcept;
   ::toykv::TInsertReq insertReq;

  _ToykvService_Insert_args__isset __isset;

  void __set_insertReq(const  ::toykv::TInsertReq& val);

  bool operator == (const ToykvService_Insert_args & rhs) const
  {
    if (!(insertReq == rhs.insertReq))
      return false;
    return true;
  }
  bool operator != (const ToykvService_Insert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToykvService_Insert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ToykvService_Insert_pargs {
 public:


  virtual ~ToykvService_Insert_pargs() noexcept;
  const  ::toykv::TInsertReq* insertReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToykvService_Insert_result__isset {
  _ToykvService_Insert_result__isset() : success(false) {}
  bool success :1;
} _ToykvService_Insert_result__isset;

class ToykvService_Insert_result {
 public:

  ToykvService_Insert_result(const ToykvService_Insert_result&);
  ToykvService_Insert_result& operator=(const ToykvService_Insert_result&);
  ToykvService_Insert_result() noexcept {
  }

  virtual ~ToykvService_Insert_result() noexcept;
   ::toykv::TDmlRes success;

  _ToykvService_Insert_result__isset __isset;

  void __set_success(const  ::toykv::TDmlRes& val);

  bool operator == (const ToykvService_Insert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ToykvService_Insert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToykvService_Insert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToykvService_Insert_presult__isset {
  _ToykvService_Insert_presult__isset() : success(false) {}
  bool success :1;
} _ToykvService_Insert_presult__isset;

class ToykvService_Insert_presult {
 public:


  virtual ~ToykvService_Insert_presult() noexcept;
   ::toykv::TDmlRes* success;

  _ToykvService_Insert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ToykvService_Delete_args__isset {
  _ToykvService_Delete_args__isset() : deleteReq(false) {}
  bool deleteReq :1;
} _ToykvService_Delete_args__isset;

class ToykvService_Delete_args {
 public:

  ToykvService_Delete_args(const ToykvService_Delete_args&) noexcept;
  ToykvService_Delete_args& operator=(const ToykvService_Delete_args&) noexcept;
  ToykvService_Delete_args() noexcept {
  }

  virtual ~ToykvService_Delete_args() noexcept;
   ::toykv::TDeleteReq deleteReq;

  _ToykvService_Delete_args__isset __isset;

  void __set_deleteReq(const  ::toykv::TDeleteReq& val);

  bool operator == (const ToykvService_Delete_args & rhs) const
  {
    if (!(deleteReq == rhs.deleteReq))
      return false;
    return true;
  }
  bool operator != (const ToykvService_Delete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToykvService_Delete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ToykvService_Delete_pargs {
 public:


  virtual ~ToykvService_Delete_pargs() noexcept;
  const  ::toykv::TDeleteReq* deleteReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToykvService_Delete_result__isset {
  _ToykvService_Delete_result__isset() : success(false) {}
  bool success :1;
} _ToykvService_Delete_result__isset;

class ToykvService_Delete_result {
 public:

  ToykvService_Delete_result(const ToykvService_Delete_result&);
  ToykvService_Delete_result& operator=(const ToykvService_Delete_result&);
  ToykvService_Delete_result() noexcept {
  }

  virtual ~ToykvService_Delete_result() noexcept;
   ::toykv::TDmlRes success;

  _ToykvService_Delete_result__isset __isset;

  void __set_success(const  ::toykv::TDmlRes& val);

  bool operator == (const ToykvService_Delete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ToykvService_Delete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToykvService_Delete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToykvService_Delete_presult__isset {
  _ToykvService_Delete_presult__isset() : success(false) {}
  bool success :1;
} _ToykvService_Delete_presult__isset;

class ToykvService_Delete_presult {
 public:


  virtual ~ToykvService_Delete_presult() noexcept;
   ::toykv::TDmlRes* success;

  _ToykvService_Delete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ToykvService_CreateTable_args__isset {
  _ToykvService_CreateTable_args__isset() : createTableReq(false) {}
  bool createTableReq :1;
} _ToykvService_CreateTable_args__isset;

class ToykvService_CreateTable_args {
 public:

  ToykvService_CreateTable_args(const ToykvService_CreateTable_args&);
  ToykvService_CreateTable_args& operator=(const ToykvService_CreateTable_args&);
  ToykvService_CreateTable_args() noexcept {
  }

  virtual ~ToykvService_CreateTable_args() noexcept;
   ::toykv::TCreateTableReq createTableReq;

  _ToykvService_CreateTable_args__isset __isset;

  void __set_createTableReq(const  ::toykv::TCreateTableReq& val);

  bool operator == (const ToykvService_CreateTable_args & rhs) const
  {
    if (!(createTableReq == rhs.createTableReq))
      return false;
    return true;
  }
  bool operator != (const ToykvService_CreateTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToykvService_CreateTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ToykvService_CreateTable_pargs {
 public:


  virtual ~ToykvService_CreateTable_pargs() noexcept;
  const  ::toykv::TCreateTableReq* createTableReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToykvService_CreateTable_result__isset {
  _ToykvService_CreateTable_result__isset() : success(false) {}
  bool success :1;
} _ToykvService_CreateTable_result__isset;

class ToykvService_CreateTable_result {
 public:

  ToykvService_CreateTable_result(const ToykvService_CreateTable_result&);
  ToykvService_CreateTable_result& operator=(const ToykvService_CreateTable_result&);
  ToykvService_CreateTable_result() noexcept {
  }

  virtual ~ToykvService_CreateTable_result() noexcept;
   ::toykv::TDdlRes success;

  _ToykvService_CreateTable_result__isset __isset;

  void __set_success(const  ::toykv::TDdlRes& val);

  bool operator == (const ToykvService_CreateTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ToykvService_CreateTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ToykvService_CreateTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ToykvService_CreateTable_presult__isset {
  _ToykvService_CreateTable_presult__isset() : success(false) {}
  bool success :1;
} _ToykvService_CreateTable_presult__isset;

class ToykvService_CreateTable_presult {
 public:


  virtual ~ToykvService_CreateTable_presult() noexcept;
   ::toykv::TDdlRes* success;

  _ToykvService_CreateTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ToykvServiceClient : virtual public ToykvServiceIf {
 public:
  ToykvServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ToykvServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Insert( ::toykv::TDmlRes& _return, const  ::toykv::TInsertReq& insertReq) override;
  void send_Insert(const  ::toykv::TInsertReq& insertReq);
  void recv_Insert( ::toykv::TDmlRes& _return);
  void Delete( ::toykv::TDmlRes& _return, const  ::toykv::TDeleteReq& deleteReq) override;
  void send_Delete(const  ::toykv::TDeleteReq& deleteReq);
  void recv_Delete( ::toykv::TDmlRes& _return);
  void CreateTable( ::toykv::TDdlRes& _return, const  ::toykv::TCreateTableReq& createTableReq) override;
  void send_CreateTable(const  ::toykv::TCreateTableReq& createTableReq);
  void recv_CreateTable( ::toykv::TDdlRes& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ToykvServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ToykvServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (ToykvServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Insert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Delete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_CreateTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ToykvServiceProcessor(::std::shared_ptr<ToykvServiceIf> iface) :
    iface_(iface) {
    processMap_["Insert"] = &ToykvServiceProcessor::process_Insert;
    processMap_["Delete"] = &ToykvServiceProcessor::process_Delete;
    processMap_["CreateTable"] = &ToykvServiceProcessor::process_CreateTable;
  }

  virtual ~ToykvServiceProcessor() {}
};

class ToykvServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ToykvServiceProcessorFactory(const ::std::shared_ptr< ToykvServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< ToykvServiceIfFactory > handlerFactory_;
};

class ToykvServiceMultiface : virtual public ToykvServiceIf {
 public:
  ToykvServiceMultiface(std::vector<std::shared_ptr<ToykvServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ToykvServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ToykvServiceIf> > ifaces_;
  ToykvServiceMultiface() {}
  void add(::std::shared_ptr<ToykvServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Insert( ::toykv::TDmlRes& _return, const  ::toykv::TInsertReq& insertReq) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Insert(_return, insertReq);
    }
    ifaces_[i]->Insert(_return, insertReq);
    return;
  }

  void Delete( ::toykv::TDmlRes& _return, const  ::toykv::TDeleteReq& deleteReq) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Delete(_return, deleteReq);
    }
    ifaces_[i]->Delete(_return, deleteReq);
    return;
  }

  void CreateTable( ::toykv::TDdlRes& _return, const  ::toykv::TCreateTableReq& createTableReq) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->CreateTable(_return, createTableReq);
    }
    ifaces_[i]->CreateTable(_return, createTableReq);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ToykvServiceConcurrentClient : virtual public ToykvServiceIf {
 public:
  ToykvServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ToykvServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Insert( ::toykv::TDmlRes& _return, const  ::toykv::TInsertReq& insertReq) override;
  int32_t send_Insert(const  ::toykv::TInsertReq& insertReq);
  void recv_Insert( ::toykv::TDmlRes& _return, const int32_t seqid);
  void Delete( ::toykv::TDmlRes& _return, const  ::toykv::TDeleteReq& deleteReq) override;
  int32_t send_Delete(const  ::toykv::TDeleteReq& deleteReq);
  void recv_Delete( ::toykv::TDmlRes& _return, const int32_t seqid);
  void CreateTable( ::toykv::TDdlRes& _return, const  ::toykv::TCreateTableReq& createTableReq) override;
  int32_t send_CreateTable(const  ::toykv::TCreateTableReq& createTableReq);
  void recv_CreateTable( ::toykv::TDdlRes& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
